# Production Nginx Configuration Template
# Bu dosyayı production domain'leriniz için kullanın

# ==============================================
# API SERVER CONFIGURATION
# ==============================================

# HTTP to HTTPS redirect for API
server {
    if ($host = api.yourdomain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name api.yourdomain.com;
    return 301 https://$server_name$request_uri;
}

# HTTPS API Server
server {
    listen 443 ssl http2;
    server_name api.yourdomain.com;

    # SSL Configuration (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/api.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.yourdomain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;

    # API Rate Limiting
    limit_req zone=api burst=20 nodelay;

    # Health check endpoint
    location /health {
        access_log off;
        proxy_pass http://api:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API endpoints
    location / {
        proxy_pass http://api:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Debug logging
        error_log /var/log/nginx/api_error.log debug;
        access_log /var/log/nginx/api_access.log;
    }

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
}

# ==============================================
# FRONTEND CONFIGURATION
# ==============================================

# HTTP to HTTPS redirect for Frontend
server {
    listen 80;
    server_name app.yourdomain.com;
    return 301 https://$server_name$request_uri;
}

# HTTPS Frontend Server
server {
    listen 443 ssl http2;
    server_name app.yourdomain.com;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/app.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/app.yourdomain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;

    # Document root
    root /usr/share/nginx/html;
    index index.html;

    # MIME type configurations
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # JavaScript modules için özel MIME type ayarları
    location ~ \.js$ {
        add_header Content-Type "application/javascript" always;
        add_header Cache-Control "no-cache";
    }

    location ~ \.mjs$ {
        add_header Content-Type "application/javascript" always;
        add_header Cache-Control "no-cache";
    }

    # React/Vue/Angular SPA uygulaması için ana konum
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";

        # Security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.yourdomain.com;" always;
    }

    # Static assets için cache
    location /assets {
        expires 1y;
        add_header Cache-Control "public, no-transform, immutable";

        # JavaScript modülleri için
        location ~* \.js$ {
            add_header Content-Type "application/javascript" always;
            try_files $uri =404;
        }

        # CSS için
        location ~* \.css$ {
            add_header Content-Type "text/css" always;
            try_files $uri =404;
        }

        # Images ve fonts için
        location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            try_files $uri =404;
        }
    }

    # Static klasörü için alternatif
    location /static {
        alias /usr/share/nginx/html/static;
        expires 1y;
        add_header Cache-Control "public, no-transform, immutable";
    }

    # API proxy (eğer aynı domain'den API'ye erişim istenirse)
    location /api {
        proxy_pass https://api.yourdomain.com;
        proxy_set_header Host api.yourdomain.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_ssl_verify off;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype;
}

# ==============================================
# CUSTOMER SITES CONFIGURATION
# ==============================================

# Customer 1 - HTTP to HTTPS redirect
server {
    listen 80;
    server_name client1.yourdomain.com;
    return 301 https://$server_name$request_uri;
}

# Customer 1 - HTTPS
server {
    listen 443 ssl http2;
    server_name client1.yourdomain.com;

    ssl_certificate /etc/letsencrypt/live/client1.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/client1.yourdomain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=63072000" always;

    root /usr/share/nginx/html/sites/client1;
    index index.html;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # React/SPA routing
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
    }

    # Assets
    location /assets {
        expires 1y;
        add_header Cache-Control "public, no-transform, immutable";
    }

    # Customer-specific API access
    location /api {
        proxy_pass http://api:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Client-ID "client1";
    }

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
}