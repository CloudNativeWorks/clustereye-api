version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clustereye-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-clustereye}
      POSTGRES_USER: ${DB_USER:-clustereye_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/conf:/etc/postgresql/conf.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - clustereye-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-clustereye_user} -d ${DB_NAME:-clustereye}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # InfluxDB for Metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: clustereye-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD:-changeme}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-clustereye}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-clustereye}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    networks:
      - clustereye-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClusterEye API Server
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: clustereye-api
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-clustereye}
      DB_USER: ${DB_USER:-clustereye_user}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}

      # InfluxDB
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: ${INFLUXDB_ORG:-clustereye}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET:-clustereye}

      # Server Config
      HTTP_PORT: 8080
      GRPC_PORT: 50051
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT: ${RATE_LIMIT:-120}

      # Security
      ENABLE_HTTPS: ${ENABLE_HTTPS:-false}
      SSL_CERT_PATH: ${SSL_CERT_PATH:-}
      SSL_KEY_PATH: ${SSL_KEY_PATH:-}
    volumes:
      - ./logs:/app/logs
      - ./docker/ssl:/app/ssl:ro
    ports:
      - "${HTTP_PORT:-8080}:8080"
      - "${GRPC_PORT:-50051}:50051"
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - clustereye-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy & Frontend
  nginx:
    image: nginx:1.25-alpine
    container_name: clustereye-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/frontend:/usr/share/nginx/html:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - api
    networks:
      - clustereye-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Grafana for Monitoring
  grafana:
    image: grafana/grafana-oss:10.2.0
    container_name: clustereye-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-changeme}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - influxdb
    networks:
      - clustereye-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  grafana_data:
    driver: local

networks:
  clustereye-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16